local ScriptGenerator = {}

-- Template styles for different output formats
local TEMPLATES = {
    simple = {
        functionCall = [[
local remote = game:GetService("ReplicatedStorage"):WaitForChild("%s")
local args = %s

local result = remote:InvokeServer(unpack(args))
print("Return value:", result)]],

        eventCall = [[
local remote = game:GetService("ReplicatedStorage"):WaitForChild("%s")
local args = %s

remote:FireServer(unpack(args))]]
    },

    advanced = {
        functionCall = [[
-- Advanced Remote Function Call Script
-- Generated by AdvancedSpy

local remote = game:GetService("ReplicatedStorage"):WaitForChild("%s")
local args = %s

local function callRemote()
    local success, result = pcall(function()
        return remote:InvokeServer(unpack(args))
    end)

    if success then
        print("Remote call successful")
        print("Return value:", result)
        return result
    else
        warn("Remote call failed:", result)
        return nil
    end
end

local result = callRemote()]],

        eventCall = [[
-- Advanced Remote Event Call Script
-- Generated by AdvancedSpy

local remote = game:GetService("ReplicatedStorage"):WaitForChild("%s")
local args = %s

local function fireRemote()
    local success, err = pcall(function()
        remote:FireServer(unpack(args))
    end)

    if not success then
        warn("Failed to fire remote:", err)
    end
end

fireRemote()]]
    },

    debug = {
        functionCall = [[
-- Debug Remote Function Call Script
-- Generated by AdvancedSpy

local remote = game:GetService("ReplicatedStorage"):WaitForChild("%s")
local args = %s

local function debugCall()
    print("Preparing to call remote function:", remote.Name)
    print("Arguments:", require("TableUtil").ToString(args))

    local startTime = os.clock()
    local success, result = pcall(function()
        return remote:InvokeServer(unpack(args))
    end)
    local endTime = os.clock()

    print(string.format("Call completed in %.3f seconds", endTime - startTime))

    if success then
        print("Success! Return value:", result)
        return result
    else
        warn("Call failed:", result)
        return nil
    end
end

local result = debugCall()]],

        eventCall = [[
-- Debug Remote Event Call Script
-- Generated by AdvancedSpy

local remote = game:GetService("ReplicatedStorage"):WaitForChild("%s")
local args = %s

local function debugFire()
    print("Preparing to fire remote event:", remote.Name)
    print("Arguments:", require("TableUtil").ToString(args))

    local startTime = os.clock()
    local success, err = pcall(function()
        remote:FireServer(unpack(args))
    end)
    local endTime = os.clock()

    print(string.format("Fire completed in %.3f seconds", endTime - startTime))

    if not success then
        warn("Fire failed:", err)
    end
end

debugFire()]]
    }
}

function ScriptGenerator:GenerateScript(remote, args, style)
    style = style or "simple"
    if not TEMPLATES[style] then
        warn("Invalid script style:", style)
        style = "simple"
    end

    if remote:IsA("RemoteFunction") then
        return self:GenerateRemoteFunctionScript(remote, args, style)
    else
        return self:GenerateRemoteEventScript(remote, args, style)
    end
end

function ScriptGenerator:GenerateRemoteFunctionScript(remote, args, style)
    return string.format(
        TEMPLATES[style].functionCall,
        self:GetRemotePath(remote),
        self:SerializeArgs(args)
    )
end

function ScriptGenerator:GenerateRemoteEventScript(remote, args, style)
    return string.format(
        TEMPLATES[style].eventCall,
        self:GetRemotePath(remote),
        self:SerializeArgs(args)
    )
end

function ScriptGenerator:GetRemotePath(remote)
    local path = {}
    local current = remote

    while current and current ~= game do
        table.insert(path, 1, current.Name)
        current = current.Parent
    end

    return table.concat(path, ".")
end

function ScriptGenerator:SerializeArgs(args)
    if #args == 0 then
        return "{}"
    end

    local serialized = "{\n"
    for i, arg in ipairs(args) do
        serialized = serialized .. "    " .. self:SerializeValue(arg)
        if i < #args then
            serialized = serialized .. ","
        end
        serialized = serialized .. "\n"
    end
    serialized = serialized .. "}"

    return serialized
end

function ScriptGenerator:SerializeValue(value)
    local valueType = typeof(value)

    if valueType == "string" then
        return string.format("%q", value)
    elseif valueType == "number" or valueType == "boolean" then
        return tostring(value)
    elseif valueType == "table" then
        local result = "{\n"
        for k, v in pairs(value) do
            local keyStr = type(k) == "string" and string.format("[%q]", k) or string.format("[%s]", tostring(k))
            result = result .. string.format("        %s = %s,\n", keyStr, self:SerializeValue(v))
        end
        result = result .. "    }"
        return result
    elseif valueType == "Instance" then
        return string.format('game:GetService("%s")', value.ClassName)
    elseif valueType == "Vector3" then
        return string.format("Vector3.new(%f, %f, %f)", value.X, value.Y, value.Z)
    elseif valueType == "CFrame" then
        local x, y, z = value.Position:components()
        return string.format("CFrame.new(%f, %f, %f)", x, y, z)
    else
        return "nil --[[ Unable to serialize " .. valueType .. " ]]"
    end
end

return ScriptGenerator